<?php

/**
 * @file
 * Supports card on file functionality for credit card payment methods by
 * associating card data reference IDs from payment gateways with user accounts.
 */


/**
 * Implements hook_menu().
 */
function commerce_cardonfile_menu() {
  $items = array();

  $items['admin/commerce/config/cardonfile'] = array(
    'title' => 'Card on file settings',
    'description' => 'Configure your card on file settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_cardonfile_settings_form'),
    'access arguments' => array('configure cardonfile'),
    'file' => 'includes/commerce_cardonfile.admin.inc',
  );

  $items['user/%user/stored-payment-methods/%commerce_cardonfile_data'] = array(
    'title' => 'Credit card',
    'page callback' => 'commerce_cardonfile_redirect_to_user',
    'page arguments' => array(1),
    'access callback' => 'commerce_cardonfile_data_access',
    'access arguments' => array(3),
  );

  $items['user/%user/stored-payment-methods/%commerce_cardonfile_data/update'] = array(
    'title' => 'Update',
    'description' => 'Update a stored payment method.',
    'page callback' => 'commerce_cardonfile_update_page',
    'page arguments' => array(3, 1),
    'access callback' => 'commerce_cardonfile_data_access',
    'access arguments' => array(3, 'update'),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'file' => 'includes/commerce_cardonfile.pages.inc',
  );

  $items['user/%user/stored-payment-methods/%commerce_cardonfile_data/delete'] = array(
    'title' => 'Delete',
    'description' => 'Delete a stored payment method.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_cardonfile_delete_form', 3),
    'access callback' => 'commerce_cardonfile_data_access',
    'access arguments' => array(3, 'delete'),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'weight' => 10,
    'file' => 'includes/commerce_cardonfile.pages.inc',
  );

  // create paths for each payment method
  $create_implements = commerce_cardonfile_payment_method_implements('create callback');
  foreach ($create_implements as $method_id => $method_function) {
    $payment_method_instances = _commerce_cardonfile_payment_method_instances($method_id, FALSE);
    if (empty($payment_method_instances)) {
      continue;
    }

    foreach ($payment_method_instances as $instance_id => $payment_method) {
      $items['user/%user/stored-payment-methods/add/' . drupal_hash_base64($instance_id)] = array(
        'title' => 'Add a !name',
        'title arguments' => array('!name' => $payment_method['display_title']),
        'page callback' => 'commerce_cardonfile_create_page',
        'page arguments' => array($instance_id, 1),
        'access callback' => 'commerce_cardonfile_create_access',
        'access arguments' => array($instance_id, 1),
        'type' => MENU_LOCAL_ACTION,
        'file' => 'includes/commerce_cardonfile.pages.inc',
      );
    }
  }


  return $items;
}

/**
 * Determines if the current user has access to the specified account's "Stored
 * payment methods" tab.
 */
function commerce_cardonfile_user_access($account) {
  global $user;

  // Only show the tab if a user actually has card data on file.
  $stored_cards = commerce_cardonfile_data_load_multiple($account->uid);

  if (empty($stored_cards)) {
    return FALSE;
  }

  // Grant access for any user with administer permission.
  if (user_access('administer card data')) {
    return TRUE;
  }

  // Grant access for users with permission to manage their own card data.
  if ($user->uid && user_access('manage own card data') && $user->uid == $account->uid) {
    return TRUE;
  }

  return FALSE;
}

/**
 * Determines if the current user has access to create a card for the account
 *
 * @param $method_id
 *   The payment method id
 * @param $account
 *   The user account that will be the card owner
 *
 * @return
 *   TRUE if the current user has access
 */
function commerce_cardonfile_create_access($instance_id, $account) {
  $payment_method = commerce_payment_method_instance_load($instance_id);
  $create_callback = commerce_cardonfile_payment_method_callback($payment_method, 'create callback');

  // DENY if no create callback
  if (empty($create_callback)) {
    return FALSE;
  }

/** @todo check admin access (create any for anyone), create any for own, create method_id for own ******/
  return TRUE;
}

/**
 * Determines if the current user has access to perform an operation on the
 * given card data array.
 *
 * @param $card_data
 *   The card data array
 * @param $op
 *   The operation being performed. One of 'view', 'update', 'create' or
 *   'delete'.
 *
 * @return
 *   TRUE if the current user has access
 */
function commerce_cardonfile_data_access($card_data = array(), $op = 'view') {
  global $user;

  // DENY if callback does NOT exist for specific operations
  if (!empty($card_data['instance_id'])) {
    $payment_method = commerce_payment_method_instance_load($card_data['instance_id']);


    $op = !empty($op) ? $op : 'view';
    $callback = TRUE;
    switch ($op) {
      case 'create':
        $callback = commerce_cardonfile_payment_method_callback($payment_method, 'create callback');
        break;

      case 'delete':
        $callback = commerce_cardonfile_payment_method_callback($payment_method, 'delete callback');
        break;

      default:
        $callback = TRUE;
        break;
    }

    // DENY
    if (empty($callback)) {
      return FALSE;
    }
  }

  // Grant access for any user with administer permission.
  if (user_access('administer card data')) {
    return TRUE;
  }

  // Grant access for users with permission to manage their own card data.
  if ($user->uid && user_access('manage own card data') && $user->uid == $card_data['uid']) {
    return TRUE;
  }

  return FALSE;
}

/**
 * Redirects from a would be card data page to the user's stored payment methods tab.
 */
function commerce_cardonfile_redirect_to_user($account) {
  drupal_goto('user/' . $account->uid . '/stored-payment-methods');
}

/**
 * Implements hook_permission().
 */
function commerce_cardonfile_permission() {
  return array(
    'configure cardonfile' => array(
      'title' => t('Configure Card on File'),
      'description' => t('Update the Card on File configuration in the Store back end.'),
      'restrict access' => TRUE,
    ),
    'administer card data' => array(
      'title' => t('Administer card data'),
      'description' => t("Access and update any user's stored card data."),
      'restrict access' => TRUE,
    ),
    'manage own card data' => array(
      'title' => t('Manage own card data'),
      'description' => t('Manage your own stored card data via a tab on your user account page.'),
    ),
  );
}

/**
 * Implements hook_hook_info().
 */
function commerce_cardonfile_hook_info() {
  $base_info = array(
    'group' => 'commerce',
  );

  $hooks = array(
    'commerce_cardonfile_data_insert' => $base_info,
    'commerce_cardonfile_data_update' => $base_info,
    'commerce_cardonfile_data_delete' => $base_info,
  );

  return $hooks;
}

/**
 * Implements hook_views_api().
 */
function commerce_cardonfile_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'commerce_cardonfile') . '/includes/views',
  );
}

/**
 * Implements hook_theme().
 */
function commerce_cardonfile_theme() {
  return array(
    'card_data_overview' => array(
      'variables' => array('card_data' => array()),
    ),
  );
}

/**
 * Themes a display of stored card data.
 *
 * @param $variables
 *   An array of theme variables including:
 *   - card_data: a data array for the stored card on file
 */
function theme_card_data_overview($variables) {
  drupal_add_css(drupal_get_path('module', 'commerce_cardonfile') . '/theme/commerce_cardonfile.css');
  $card_data = $variables['card_data'];

  // Load the credit card helper functions from the Payment module.
  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');
  $card_types = commerce_payment_credit_card_types();

  // Extract the name of the card type if possible.
  $card_type = t('Credit card');

  if (!empty($card_types[$card_data['card_type']])) {
    $card_type = $card_types[$card_data['card_type']];
  }

  // Build an array of data lines to include in the overview.
  $lines = array(
    t('Type:') => $card_type,
    t('Cardholder name:') => check_plain($card_data['card_name']),
    t('Number (last 4):') => '******' . check_plain($card_data['card_number']),
    t('Expiration date:') => check_plain($card_data['card_exp_month'] . '/' . $card_data['card_exp_year']),
  );

  $output = '';

  foreach ($lines as $label => $value) {
    // Only add a line if it has a value.
    if (!empty($value)) {
      $output .= '<div class="commerce-card-data-line"><span class="label">' . $label . '</span> ' . $value . '</div>';
    }
  }

  return '<div class="commerce-card-data">' . $output . '</div>';
}

/**
 * Implements hook_form_alter().
 *
 * This implementation alters any checkout form looking for the payment pane
 * and seeing if its details are currently for a credit card payment method. If
 * so, it adds the necessary form elements for Card on File payment, including a
 * select element to use previously stored credit card information and a
 * checkbox on the credit card data entry form to store the given credit card on
 * file for future usage.
 */
function commerce_cardonfile_form_alter(&$form, &$form_state, $form_id) {
  // If the current form ID is for a checkout form...
  if (strpos($form_id, 'commerce_checkout_form_') === 0) {
    // And it specifies a valid checkout page...
    if (commerce_checkout_page_load(substr($form_id, 23))) {
      // And the current page's form includes the payment checkout pane...
      if (!empty($form['commerce_payment'])) {
        // Check to see if the currently selected payment method is Card on File
        // enabled (via the cardonfile boolean in its info array).
        $payment_method = commerce_payment_method_instance_load($form['commerce_payment']['payment_method']['#default_value']);

        if (!empty($form_state['account']->uid) && !empty($payment_method['cardonfile']) && !empty($form['commerce_payment']['payment_details']['credit_card'])) {
          // Add a checkbox to the credit card details container to store the
          // credit card for future use.
          $storage = variable_get('commerce_cardonfile_storage', 'opt-in');

          if (in_array($storage, array('opt-in', 'opt-out'))) {
            $form['commerce_payment']['payment_details']['credit_card']['cardonfile_store'] = array(
              '#type' => 'checkbox',
              '#title' => t('Store this credit card on file for future use.'),
              '#default_value' => $storage == 'opt-out',
            );
          }
          else {
            $form['commerce_payment']['payment_details']['credit_card']['cardonfile_store'] = array(
              '#type' => 'value',
              '#value' => TRUE,
            );
          }

          // Load any existing card data for the current payment method instance
          // and user.
          $stored_cards = commerce_cardonfile_data_load_multiple($form_state['account']->uid, $payment_method['instance_id']);

          // Filter out expired cards.
          foreach ($stored_cards as $card_id => $card_data) {
            if ($card_data['card_exp_year'] < date('Y') ||
              $card_data['card_exp_year'] == date('Y') && $card_data['card_exp_month'] < date('m')) {
              unset($stored_cards[$card_id]);
            }
          }

          // If we found any stored cards, show the options in the form.
          if (!empty($stored_cards)) {
            $element = variable_get('commerce_cardonfile_selector', 'radios');
            $options = commerce_cardonfile_options_list($stored_cards, $element);

            $form['commerce_payment']['payment_details']['cardonfile'] = array(
              '#type' => $element,
              '#title' => t('Select a stored credit card'),
              '#options' => $options,
              '#default_value' => key($options),
              '#weight' => -10,
              '#ajax' => array(
                'callback' => 'commerce_payment_pane_checkout_form_details_refresh',
                'wrapper' => 'payment-details',
              ),
            );

            // If the current value for the card selection element is not to use
            // a different credit card, then hide the credit card form elements.
            if (empty($form_state['values']) || $form_state['values']['commerce_payment']['payment_details']['cardonfile'] !== 'new') {
              $form['commerce_payment']['payment_details']['credit_card']['#access'] = FALSE;
            }

            // Add the CSS to hide a sole credit card icon if specified.
            if (variable_get('commerce_cardonfile_hide_cc_radio_button', TRUE)) {
              if (count($form['commerce_payment']['payment_method']['#options']) == 1) {
                $form['commerce_payment']['payment_method']['#attached']['css'][] = drupal_get_path('module', 'commerce_cardonfile') . '/theme/commerce_cardonfile.checkout.css';
              }
            }
          }
        }
      }
    }
  }
}

/**
 * Returns an options array for selecting a card on file or choosing to use a
 * different credit card.
 *
 * @param $stored_cards
 *   An array of stored card data arrays keyed by card_id.
 * @param $element
 *   The form element the options array will be for, 'radios' or 'select'.
 * @param $different
 *   Add an option to use a different credit card.
 *
 * @return
 *   An options array for selecting a card on file.
 */
function commerce_cardonfile_options_list($stored_cards, $element = 'radios', $different = TRUE) {
  // Load the credit card helper functions from the Payment module.
  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');
  $card_types = commerce_payment_credit_card_types();

  // Build an options array of stored credit cards.
  $options = array();

  foreach ($stored_cards as $card_id => $card_data) {
    $replacement = array('@name' => $card_data['card_name'], '@number' => $card_data['card_number'], '@month' => str_pad($card_data['card_exp_month'], 2, '0', STR_PAD_LEFT), '@year' => $card_data['card_exp_year']);

    if (!empty($card_types[$card_data['card_type']])) {
      $replacement['@type'] = $card_types[$card_data['card_type']];
    }
    else {
      $replacement['@type'] = 'Card';
    }

    // Use a longer format for radio button options.
    if ($element == 'radios') {
      $label = t('@type belonging to @name: Ends in @number, Expires @month/@year', $replacement);
    }
    else {
      $label = t('@type ending in @number, Exp. @month/@year', $replacement);
    }

    $options[$card_id] = $label;
  }

  // Add an option to use a different credit card if specified.
  if ($different) {
    $options['new'] = t('Use a different credit card');
  }

  return $options;
}

/**
 * Returns the human readable title of any or all data statuses.
 *
 * @param $name
 *   Optional parameter specifying the name of the status whose title
 *     to return.
 *
 * @return
 *   Either an array of all status titles keyed by the status_id or a
 *     string containing the human readable title for the specified status. If a
 *     status is specified that does not exist, this function returns FALSE.
 */
function commerce_cardonfile_data_status_get_title($name = NULL) {
  $statuses = commerce_cardonfile_data_statuses();

  // Return a status title if specified and it exists.
  if (!empty($name)) {
    if (isset($statuses[$name])) {
      return $statuses[$name];
    }
    else {
      // Return FALSE if it does not exist.
      return FALSE;
    }
  }

  // Otherwise return all titles.
  return $statuses;
}

/**
 * Wraps commerce_cardonfile_status_get_title().
 */
function commerce_cardonfile_data_status_options_list() {
  return commerce_cardonfile_data_status_get_title();
}

/**
 * Returns a list of cof data statuses
 */
function commerce_cardonfile_data_statuses() {
  $statuses = array(
    0 => t('Inactive'),
    1 => t('Active'),
    2 => t('Not deletable'),
  );

  return $statuses;
}

/**
 * Returns an array of all available payment method cardonfile callbacks
 */
function commerce_cardonfile_payment_method_available_callbacks() {
  return array(
    'create callback',
    'update callback',
    'delete callback',
    'process callback',
    'get address callback',
    'charge callback', // (implemented in commerce_recurring)
  );
}

/**
 * Returns the specified Card on File callback for the given payment method if it exists.
 *
 * @param $payment_method
 *   The payment method object.
 * @param $callback
 *   The callback function to return, one of:
 *    - 'create callback',
 *    - 'update callback'
 *    - 'delete callback'
 *    - 'process callback'
 *    - 'get address callback'
 *    - 'charge callback' (implemented in commerce_recurring)
 *
 * @return
 *   A string containing the name of the callback function or FALSE if it could
 *     not be found.
 */
function commerce_cardonfile_payment_method_callback($payment_method, $callback) {
  if (!empty($payment_method) && !empty($payment_method['method_id'])) {
    $implements = commerce_cardonfile_payment_method_implements($callback);
    if (!empty($implements) && !empty($implements[$payment_method['method_id']])) {
      return $implements[$payment_method['method_id']];
    }
  }
}

/**
 * Returns all payment method instances that implement a specific callback
 *
 * @param $callback
 *   The callback function to return, one of:
 *    - 'create callback',
 *    - 'update callback'
 *    - 'delete callback'
 *    - 'process callback'
 *    - 'get address callback'
 *    - 'charge callback' (implemented in commerce_recurring)
 *
 * @return
 *  An array of callback function names keyed by payment method id
 */
function commerce_cardonfile_payment_method_implements($callback) {
  $cache = &drupal_static(__FUNCTION__);

  if (!isset($cache)) {
    $cache = array();

    // get payment methods and load module implements for hook_commerce_payment_method_info()
    // so that cardonfile callback can be in same hook file, ie mymodule.commerce.inc
    $payment_methods = commerce_payment_methods();
    $available_callbacks = commerce_cardonfile_payment_method_available_callbacks();
    foreach ($payment_methods as $method_id => $payment_method) {
      foreach ($available_callbacks as $available_callback) {
        if (!empty($payment_method['cardonfile'][$available_callback])) {
          $func = $payment_method['cardonfile'][$available_callback];
          if (function_exists($func)) {
            $cache[$available_callback][$method_id] = $func;
          }
        }
      }
    }
  }

  return isset($cache[$callback]) ? $cache[$callback] : array();
}

/**
 * Returns all payment method instances for a given payment method id
 *
 * @param $method_id
 *   A payment method id
 *
 * @param $active_only
 *   Only return active instances
 *
 * @return
 *   An array of all loaded payment method instances
 */
function _commerce_cardonfile_payment_method_instances($method_id, $include_disabled = FALSE) {
  $cached_ids = &drupal_static(__FUNCTION__, array());
  $include_disabled = !empty($include_disabled);

  if (!array_key_exists($method_id, $cached_ids)) {
    $cached_ids[$method_id] = array();

    // load all rules ... no easier way
    $rules_configs = rules_config_load_multiple(FALSE);

    // find all rules with an action to enable this method
    foreach ($rules_configs as $rule_name => $rule) {
      // fast skip if rule does not depend on commerce_payment
      if (!isset($rule->dependencies) || !in_array('commerce_payment', $rule->dependencies)) {
        continue;
      }

      foreach ($rule->actions() as $action) {
        // skip any actions that are not simple rules actions, ie loops
        if (!($action instanceof RulesAction)) {
          continue;
        }

        if ($action->getElementName() == 'commerce_payment_enable_' . $method_id) {
          $instance_id = commerce_payment_method_instance_id($method_id, $rule);
          $cached_ids[$method_id][$instance_id] = $rule->active;
          continue 2; // skip to next rule
        }
      }
    }
  }

  // load instances
  $instances = array();
  if (!empty($cached_ids[$method_id])) {
    foreach ($cached_ids[$method_id] as $instance_id => $instance_active) {
      if ($instance_active || $include_disabled) {
        $instances[$instance_id] = commerce_payment_method_instance_load($instance_id);
      }
    }
  }

  return $instances;
}


/**
 * Loads stored card data by ID.
 *
 * @param $card_id
 *   The local ID of the stored card data to load.
 *
 * @return
 *   An array containing the specified card data or FALSE if the specified card
 *   data does not exist.
 */
function commerce_cardonfile_data_load($card_id) {
  return db_select('commerce_card_data', 'ccd')
    ->fields('ccd')
    ->condition('ccd.card_id', $card_id)
    ->execute()
    ->fetchAssoc();
}

/**
 * Loads stored card data for a user by payment method instance.
 *
 * @param $uid
 *   The user ID of the user whose card data should be loaded.
 * @param $instance_id
 *   The payment method instance ID to load card data for.
 * @param $active
 *   Boolean indicating whether or not to only return active card data; defaults
 *   to TRUE.
 *
 * @return
 *   An associative array of all applicable card data keyed by card_id or an
 *   empty array if no matching data exists.
 */
function commerce_cardonfile_data_load_multiple($uid, $instance_id = NULL, $active = TRUE) {
  $query = db_select('commerce_card_data', 'ccd')
    ->fields('ccd')
    ->condition('ccd.uid', $uid);

  if (!empty($instance_id)) {
    $query
      ->condition('ccd.instance_id', $instance_id);
  }

  if ($active) {
    $query
      ->condition('ccd.status', 1);
  }

  return $query
    ->execute()
    ->fetchAllAssoc('card_id', PDO::FETCH_ASSOC);
}

/**
 * Saves an array of card data.
 *
 * @param $card_data
 *   An array of card data including the following keys:
 *   - card_id: if present, saves an existing card data array, otherwise inserts
 *     the card data in a new record
 *   - uid: the user ID of the account the card data is being stored for
 *   - payment_method: the name of the payment method the card was used for
 *   - instance_id: the payment method instance ID containing the credentials
 *     that will be used to reuse the card on file
 *   - remote_id: the remote ID to the full card data at the payment gateway
 *   - card_type: short name of the credit card type if determined, based on the
 *     keys returned by commerce_payment_credit_card_types()
 *   - card_name: the name of the cardholder
 *   - card_number: the last 4 digits of the credit card number
 *   - card_exp_month: the numeric representation of the expiration month
 *   - card_exp_year: the four digit expiration year
 *   - status: integer status of the card data: inactive (0), active (1), or
 *     active and not deletable (2).
 *
 * @return
 *   The operation performed by drupal_write_record() on save; since the card
 *   data array is received by reference, it will contain the serial numeric
 *   card_id used to represent the card data locally after an insert.
 */
function commerce_cardonfile_data_save(&$card_data) {
  $return = FALSE;
  $card_data_original = NULL;

  // Load original unchanged data
  if (!empty($card_data['card_id'])) {
    $card_data_original = commerce_cardonfile_data_load($card_data['card_id']);
  }

  // Preprocess before saving and sending to hooks
  if (!empty($card_data['card_number'])) {
    // Always truncate card for security before passing to hooks
    $card_data['card_number'] = substr($card_data['card_number'], -4);
  }

  // Save card data
  if (isset($card_data_original)) {
    // Update
    $card_data['changed'] = REQUEST_TIME;

    $return = drupal_write_record('commerce_card_data', $card_data, 'card_id');

    // Notify other modules that this card data has been updated.
    module_invoke_all('commerce_cardonfile_data_update', $card_data, $card_data_original);
  }
  else {
    // Insert
    $card_data['card_id'] = NULL;
    $card_data['created'] = REQUEST_TIME;
    $card_data['changed'] = REQUEST_TIME;

    $return = drupal_write_record('commerce_card_data', $card_data);

    // Notify other modules that this card data has been inserted.
    module_invoke_all('commerce_cardonfile_data_insert', $card_data);
  }

  return $return;
}

/**
 * Deletes stored card data by local ID.
 *
 * @param $card_id
 *   The local ID of the card data to delete.
 */
function commerce_cardonfile_data_delete($card_id) {
  $card_data = commerce_cardonfile_data_load($card_id);

  if (!empty($card_data)) {
    // Notify other modules that this card data has been deleted.
    module_invoke_all('commerce_cardonfile_data_delete', $card_data);

    db_delete('commerce_card_data')
      ->condition('card_id', $card_id)
      ->execute();
  }
}

// -----------------------------------------------------------------------
// Billing address handling

/**
 * Create a billing addressfield form outside of customer profile
 *
 * @param $form
 *   The form the address field will be attached to
 * @param $form_state
 *   The form state for the form
 * @$default_values
 *   An array of default values with addressfield parameter keys
 *
 * @return
 *  The form element array created for this field.
 *
 * @see field_default_form()
 */
function commerce_cardonfile_billing_address_form(&$form, &$form_state, $default_values = array(), $include_name_lines = FALSE) {
  $host_entity_type = 'commerce_customer_profile';
  $host_bundle = 'billing';
  $host_entity = NULL;
  $field_name = 'commerce_customer_address';
  $langcode = LANGUAGE_NONE;

  $field = field_info_field($field_name);
  $instance = field_info_instance($host_entity_type, $field_name, $host_bundle);

  // hide name elements
  if (empty($include_name_lines)) {
    unset($instance['widget']['settings']['format_handlers']['name-full']);
    unset($instance['widget']['settings']['format_handlers']['name-oneline']);
  }

  // Set default values
  $values = array();
  if (!empty($default_values) && is_array($default_values)) {
    $values = $default_values;
  }

  // Create field items with addressfield defaults
  $items = array($values + addressfield_default_values());

  // initialize parents for field_default_form
  if (!isset($form['#parents'])){
    $form['#parents'] = array();
  }

  // Retrieve default form array
  return field_default_form($host_entity_type, $host_entity, $field, $instance, $langcode, $items, $form, $form_state, 0);
}


/**
 * Wrapper to determine card type based on card number
 */
function _commerce_cardonfile_get_credit_card_type($number) {
  // Determine the new credit card type if possible for use in later code.
  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');

  $card_type = '';
  $valid_types = array_keys(commerce_payment_credit_card_types());
  if (!empty($number)) {
    $card_type = commerce_payment_validate_credit_card_type($number, $valid_types);
  }

  return $card_type;
}
