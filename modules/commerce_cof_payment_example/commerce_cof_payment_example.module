<?php

/**
 * @file
 * Provides an example payment method for Drupal Commerce for testing and
 *   development of Commerce Card on File.
 */


/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_cof_payment_example_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['commerce_cof_payment_example'] = array(
    'title' => t('Card on File Example payment'),
    'description' => t('Demonstrates all integration with Commerce Card on File.'),
    'active' => TRUE,
    'cardonfile' => array(
      'create callback' => 'commerce_cof_payment_example_cardonfile_create',
      'update callback' => 'commerce_cof_payment_example_cardonfile_update',
      'delete callback' => 'commerce_cof_payment_example_cardonfile_delete',
      'get address callback' => 'commerce_cof_payment_example_cardonfile_get_address',
      'process callback' => 'commerce_cof_payment_example_cardonfile_process',
    ),
  );

  return $payment_methods;
}

/**
 * Returns the default settings.
 */
function commerce_cof_payment_example_default_settings() {
  return array(
    'login' => 'admin',
    'tran_key' => '@dM1N',
    'txn_mode' => 'live_test',
    'txn_type' => COMMERCE_CREDIT_AUTH_CAPTURE,
    'cardonfile' => FALSE,
    'card_types' => array(),
  );
}

/**
 * Payment method callback: settings form.
 */
function commerce_cof_payment_example_settings_form($settings = NULL) {
  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');

  // Merge default settings into the stored settings array.
  $settings = (array) $settings + commerce_cof_payment_example_default_settings();

  $form = array();

  $form['login'] = array(
    '#type' => 'textfield',
    '#title' => t('API Login ID'),
    '#default_value' => $settings['login'],
    '#required' => TRUE,
  );
  $form['tran_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Transaction Key'),
    '#default_value' => $settings['tran_key'],
    '#required' => TRUE,
  );
  $form['txn_mode'] = array(
    '#type' => 'radios',
    '#title' => t('Transaction mode'),
    '#description' => t('Adjust to live transactions when you are ready to start processing real payments.'),
    '#options' => array(
      'live' => t('Live transactions in a live account'),
      'live_test' => t('Test transactions in a live account'),
      'developer' => t('Developer test account transactions'),
    ),
    '#default_value' => $settings['txn_mode'],
  );
  $form['txn_type'] = array(
    '#type' => 'radios',
    '#title' => t('Default credit card transaction type'),
    '#description' => t('The default will be used to process transactions during checkout.'),
    '#options' => array(
      COMMERCE_CREDIT_AUTH_CAPTURE => t('Authorization and capture'),
      COMMERCE_CREDIT_AUTH_ONLY => t('Authorization only (requires manual or automated capture after checkout)'),
    ),
    '#default_value' => $settings['txn_type'],
  );

  $form['card_types'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Limit accepted credit cards to the following types'),
    '#description' => t('If you want to limit acceptable card types, you should only select those supported by your merchant account.') . '<br />' . t('If none are checked, any credit card type will be accepted.'),
    '#options' => commerce_payment_credit_card_types(),
    '#default_value' => $settings['card_types'],
  );

  // Card on File support.
  if (module_exists('commerce_cardonfile')) {
    $form['cardonfile'] = array(
      '#type' => 'checkbox',
      '#title' => t('Enable Card on File functionality'),
      '#description' => t('This requires an upgraded account to include support for Customer Management.'),
      '#default_value' => $settings['cardonfile'],
    );
  }


  return $form;
}

/**
 * Implements hook_commerce_cardonfile_checkout_pane_form_alter()
 */
function commerce_cof_payment_example_commerce_cardonfile_checkout_pane_form_alter(&$pane_form, $form) {
  // Add a custom description for the usage of default cards
  $pane_form['cardonfile_instance_default']['#description'] = t('Your default card will be used for automatic payments for all of your subscriptions.');

  // Make alterations for our method
  if (!empty($form['commerce_payment']['payment_method']['#default_value'])) {
    $instance_id = $form['commerce_payment']['payment_method']['#default_value'];
    $payment_method = commerce_payment_method_instance_load($instance_id);

    if ($payment_method['method_id'] == 'commerce_cof_payment_example') {
      // remove the add card new card form if setting is disabled
      if (empty($payment_method['settings']['cardonfile'])) {
        unset($pane_form['credit_card']['cardonfile_store'], $pane_form['cardonfile'], $pane_form['cardonfile_instance_default']);
      }
    }
  }
}


/**
 * Payment method callback: submit form.
 */
function commerce_cof_payment_example_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');

  // Prepare the fields to include on the credit card form.
  $fields = array(
    'code' => '',
  );

  // Add the credit card types array if necessary.
  $card_types = array_diff(array_values($payment_method['settings']['card_types']), array(0));

  if (!empty($card_types)) {
    $fields['type'] = $card_types;
  }

  return commerce_payment_credit_card_form($fields);
}

/**
 * Payment method callback: submit form validation.
 */
function commerce_cof_payment_example_submit_form_validate($payment_method, $pane_form, $pane_values, $order, $form_parents = array()) {
  // If the customer specified a card on file, skip the normal validation.
  if (module_exists('commerce_cardonfile') && !empty($payment_method['settings']['cardonfile']) &&
    !empty($pane_values['cardonfile']) && $pane_values['cardonfile'] !== 'new') {
    return;
  }

  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');

  // Validate the credit card fields.
  $settings = array(
    'form_parents' => array_merge($form_parents, array('credit_card')),
  );

  if (!commerce_payment_credit_card_validate($pane_values['credit_card'], $settings)) {
    return FALSE;
  }
}

/**
 * Payment method callback: submit form submission.
 */
function commerce_cof_payment_example_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {
  $cardonfile_capable = module_exists('commerce_cardonfile') && !empty($payment_method['settings']['cardonfile']);
  $cardonfile_selected = !empty($pane_values['cardonfile']) ? $pane_values['cardonfile'] : NULL;
  $cardonfile_store_new = !empty($pane_values['credit_card']['cardonfile_store']) ? $pane_values['credit_card']['cardonfile_store'] : NULL;

  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

  // Existing card on file for a charge of 0 ---------------------//

  // If the customer specified payment using a card on file, attempt that now
  // and simply return the result.
  if ($cardonfile_capable && !empty($cardonfile_selected) && $cardonfile_selected !== 'new') {
    if ($charge['amount'] != 0) {
      return commerce_cof_payment_example_cardonfile_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge);
    }
    // PASS for card on file selected when the charge is 0
    return TRUE;
  }

  // Register a new card on file for a charge of 0 ------------------------//
  // If the charge amount is 0...
  if ($charge['amount'] == 0 && $cardonfile_capable && $cardonfile_selected == 'new' && $cardonfile_store_new) {
    $card_remote_id = commerce_cof_payment_example_cardonfile_order_create($payment_method, $pane_form, $pane_values, $order, $charge);
    if (!empty($card_remote_id)) {
      return TRUE;
    }
  }
  else {
    //--- Process charge at remote gateway ---//

    // Save payment transaciton
    commerce_cof_payment_example_transaction($payment_method, $order, $charge, $pane_values, 'Successful example transaction');

    // If Card on File storage is enabled and the form says to store data...
    if ($cardonfile_capable && $cardonfile_store_new) {
      $card_remote_id = commerce_cof_payment_example_cardonfile_order_create($payment_method, $pane_form, $pane_values, $order, $charge);
    }

    return TRUE;
  }


  return FALSE;
}


/**
 * Payment method callback: submit form submission for card on file.
 */
function commerce_cof_payment_example_cardonfile_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {
  //-- Process charge with remote card on file -----//

  commerce_cof_payment_example_transaction($payment_method, $order, $charge, $pane_values, 'Successful example transaction with card on file');
}

/**
 * Create card remotely and store data locally
 */
function commerce_cof_payment_example_cardonfile_order_create($payment_method, $pane_form, $pane_values, $order, $charge = array()) {
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  $remote_id = NULL;
  if (isset($order_wrapper->commerce_customer_billing) && $order_wrapper->commerce_customer_billing->value()) {
    $billing_address = $order_wrapper->commerce_customer_billing->commerce_customer_address->value();

    // Determine the credit card type if possible for use in later code.
    $card_type = NULL;
    if (!empty($pane_values['credit_card']['number'])) {
      module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');
      $card_type = commerce_payment_validate_credit_card_type($pane_values['credit_card']['number'], array_keys(commerce_payment_credit_card_types()));
    }

    // Register card remotely
    $pane_values['card_owner'] = user_load($order->uid);
    $remote_id = commerce_cof_payment_example_cardonfile_create($payment_method, $pane_form, $pane_values, $billing_address);

    // Store card locally
    if (!empty($remote_id)) {
      $card_data = array(
        'uid' => $order->uid,
        'payment_method' => $payment_method['method_id'],
        'instance_id' => $payment_method['instance_id'],
        'remote_id' => $remote_id,
        'card_type' => !empty($card_type) ? $card_type : 'card',
        'card_name' => !empty($billing_address['name_line']) ? $billing_address['name_line'] : '',
        'card_number' => $pane_values['credit_card']['number'],
        'card_exp_month' => $pane_values['credit_card']['exp_month'],
        'card_exp_year' => $pane_values['credit_card']['exp_year'],
        'status' => 1,
      );

      // Save the new card on file.
      commerce_cardonfile_data_save($card_data);
    }
  }

  return $remote_id;
}

/**
 * Card on file callback: create an associated customer payment profile.
 */
function commerce_cof_payment_example_cardonfile_create($payment_method, $pane_form, $pane_values, $billing_addressfield, $card_data = array()) {
  //--- Register card on remote gateway -----//
  $remote_id = drupal_hash_base64(drupal_random_bytes(55));

  return $remote_id;
}

/**
 * Card on file callback: updates the associated customer payment profile.
 */
function commerce_cof_payment_example_cardonfile_update($form, &$form_state, $payment_method, $card_data) {
  //--- Update card information on remote gateway ----//
  drupal_set_message(t('Remote card updates are not supported with the example. The update callback is implemented to demonstrate the card on file update form.'));
  return TRUE;
}

/**
 * Card on file callback: deletes the associated customer payment profile.
 */
function commerce_cof_payment_example_cardonfile_delete($form, &$form_state, $payment_method, $card_data) {
  //--- Delete card information on remote gateway ----//
  return TRUE;
}

/**
 * Card on file callback: returns an addressfield array for a given card
 */
function commerce_cof_payment_example_cardonfile_get_address($payment_method, $card_data) {
  if (empty($card_data['uid']) || empty($card_data['instance_id']) || empty($card_data['remote_id'])) {
    return array();
  }

  //--- Get card address on remote gateway ----//
  $address = array();

  // Get last billing address for example purposes
  $account = user_load($card_data['uid']);
  $billing_profile = commerce_cof_payment_example_last_order_customer_profile($account, 'billing');
  if (!empty($billing_profile)) {
    $billing_profile_wrapper = entity_metadata_wrapper('commerce_customer_profile', $billing_profile);
    if (isset($billing_profile_wrapper->commerce_customer_address)) {
      $address = $billing_profile_wrapper->commerce_customer_address->value();
    }
  }

  return $address;
}


/**
 * Creates an example payment transaction for the specified charge amount.
 *
 * @param $payment_method
 *   The payment method instance object used to charge this payment.
 * @param $order
 *   The order object the payment applies to.
 * @param $charge
 *   An array indicating the amount and currency code to charge.
 * @param $pane_values
 *   The pane form values.
 */
function commerce_cof_payment_example_transaction($payment_method, $order, $charge, $pane_values, $message = '', $message_variables = array()) {
  $transaction = commerce_payment_transaction_new('commerce_cof_payment_example', $order->order_id);
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->amount = $charge['amount'];
  $transaction->currency_code = $charge['currency_code'];
  $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
  $transaction->message = $message;
  $transaction->message_variables = $message_variables;

  commerce_payment_transaction_save($transaction);
}

/**
 * Retrieve the user's last customer profile
 *
 * @param $account
 *  The user account object
 * @param $type
 *  The type of customer profile
 *
 * @return
 *  The customer profile object
 */
function commerce_cof_payment_example_last_order_customer_profile($account, $type = 'billing') {
  if (empty($account->uid)) {
    return;
  }

  $query = new EntityFieldQuery;
  $query_entity_type = 'commerce_order';
  $cart_order_statuses = array_keys(commerce_order_statuses(array('cart' => TRUE)));

  $result = $query
    ->entityCondition('entity_type', $query_entity_type)
    ->propertyCondition('status', $cart_order_statuses, 'NOT IN')
    ->propertyCondition('uid', $account->uid)
    ->entityOrderBy('entity_id', 'DESC')
    ->range(0, 1)
    ->execute();

  if (!empty($result[$query_entity_type])) {
    $order_id = key($result[$query_entity_type]);
    $order = commerce_order_load($order_id);
    $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
    $field_name = 'commerce_customer_' . $type;

    if (isset($order_wrapper->{$field_name})) {
      return $order_wrapper->{$field_name}->value();
    }
  }
}
